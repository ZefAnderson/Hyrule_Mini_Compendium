import { AllCallback, CategoryCallback, EntryCallback, EntryType, EntryImage } from "./types";
/**
 * Base class for hyrule-compendium
 * @param {string} [url=https://botw-compendium.herokuapp.com/api/v2] Base URL for API
 * @param {number} [default_timeout=20000] Default milliseconds to wait for response for all API calling functions until error
 */
export declare class compendium {
    url: string;
    default_timeout: number;
    constructor(default_timeout?: number, url?: string);
    /**
     * Gets an entry
     * @param {EntryType} entry The entry to be retrieved
     * @param {EntryCallback} callback Function to be executed with API data
     * @param {number} [timeout=this.default_timeout] Time to wait for response before executing @param `error_callback`
     * @param {Function} [error_callback=(err)=>{throw(err)] Function to be executed on error
     * @throws {NoEntryError} Entry must exist
     */
    get_entry(entry: EntryType, callback: EntryCallback, timeout?: number, error_callback?: Function): void;
    /**
     * Gets all entries from a category
     * @param {"creatures" | "equipment" | "equipment" | "materials" | "monsters" | "treasure"} category Name of category
     * @param {CategoryCallback} callback Function to be executed with all entries in the category.
     * @param {number} [timeout=this.default_timeout] Time to wait for response before executing @param `error_callback`
     * @param {Function} [error_callback=(err)=>{throw(err)] Function to be executed on error
     */
    get_category(category: "creatures" | "equipment" | "equipment" | "materials" | "monsters" | "treasure", callback: CategoryCallback, timeout?: number, error_callback?: Function): void;
    /**
     * Gets all entries
     * @param {AllCallback} callback Function to be executed with all entries
     * @param {number} timeout Time to wait for response before executing @param `error_callback`
     * @param {Function} [error_callback=(err)=>{throw(err)] Function to be executed on error
     */
    get_all(callback: AllCallback, timeout?: number, error_callback?: Function): void;
    /**
     * Retrieves an entry image
     * @param {EntryType} entry ID or name of entry
     * @returns {EntryImage} Image object
     */
    get_entry_image(entry: EntryType): EntryImage;
    /**
     * @deprecated Since v1.5.0. Use compendium.entry_image.download()
     * Downloads the image of an entry
     * @param {EntryType} entry ID or name of entry
     * @param {string} [output_file] File path of which image is to saved, default: "./[entry name].png"
     * @param {Function} [callback=(err: any)=>{throw err}] @param callback of https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback
     * @param {number} timeout Time to wait for response before executing @param error_callback
     * @param {Function} [error_callback=(err)=>{throw(err)] Function to be executed on error
     */
    download_entry_image(entry: EntryType, output_file?: string, callback?: Function, timeout?: number, error_callback?: Function): void;
}
